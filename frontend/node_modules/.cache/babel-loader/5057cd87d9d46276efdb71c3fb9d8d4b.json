{"ast":null,"code":"var _jsxFileName = \"/Users/huiren/Downloads/trivia_api/frontend/src/components/QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: `/questions?page=${this.state.page}`,\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: `/categories/${id}/questions`,\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: `/questions`,\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: `/questions/${id}`,\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `page-num ${i === this.state.page ? 'active' : ''}`,\n        onClick: () => {\n          this.selectPage(i);\n        },\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categories-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: () => {\n            this.getQuestions();\n          },\n          children: \"Categories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Object.keys(this.state.categories).map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              this.getByCategory(id);\n            },\n            children: [this.state.categories[id], /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"category\",\n              src: `${this.state.categories[id].toLowerCase()}.svg`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Search, {\n          submitSearch: this.submitSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), this.state.questions.map((q, ind) => /*#__PURE__*/_jsxDEV(Question, {\n          question: q.question,\n          answer: q.answer,\n          category: this.state.categories[q.category],\n          difficulty: q.difficulty,\n          questionAction: this.questionAction(q.id)\n        }, q.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pagination-menu\",\n          children: this.createPagination()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["/Users/huiren/Downloads/trivia_api/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","setState","questions","totalQuestions","total_questions","categories","error","alert","getByCategory","id","currentCategory","current_category","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","Object","keys","map","toLowerCase","q","ind","question","answer","category","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories})\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    $.ajax({\n      url: `/categories/${id}/questions`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: `/questions`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n          <ul>\n            {Object.keys(this.state.categories).map((id, ) => (\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\n                {this.state.categories[id]}\n                <img className=\"category\" src={`${this.state.categories[id].toLowerCase()}.svg`}/>\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch}/>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map((q, ind) => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories[q.category]} \n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}